generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Advisor {
  id      String   @id @default(cuid())
  email   String   @unique
  clients Client[]
}

model Client {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  totalAssets     Float?   @default(0)
  recentTransfers Float?   @default(0)
  advisor         Advisor? @relation(fields: [advisorId], references: [id])
  advisorId       String?

  summaries       Summary[]
  insights        Insight[]
  trustScores     TrustScore[]
  coachingPrompts CoachingPrompt[]
  timelineEvents  TimelineEvent[]
  forms           Form[]
  feedback        Feedback[]
  preferences     Preferences?
  meetings        Meeting[]
  notifications   Notification[]
  reminders       Reminder[]
  progress        Progress[]
  auditLog        AuditLog[]
}

model Summary {
  id       String @id @default(cuid())
  content  String
  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}

model Insight {
  id        String   @id @default(cuid())
  tags      String?
  content   String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}

model TrustScore {
  id       String @id @default(cuid())
  score    Int
  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}

model CoachingPrompt {
  id       String @id @default(cuid())
  content  String @default("")
  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}

model TimelineEvent {
  id        String   @id @default(cuid())
  title     String
  detail    String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}

model Form {
  id        String   @id @default(cuid())
  name      String
  provider  String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}

model Feedback {
  id        String   @id @default(cuid())
  message   String
  rating    Int
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}

model Preferences {
  id                 String  @id @default(cuid())
  communicationStyle String?
  investmentStyle    String?
  riskTolerance      String?
  preferredProducts  String?
  client             Client  @relation(fields: [clientId], references: [id])
  clientId           String  @unique
}

model Meeting {
  id       String   @id @default(cuid())
  date     DateTime
  time     String?
  title    String?
  location String?
  notes    String?
  client   Client   @relation(fields: [clientId], references: [id])
  clientId String
}

model Notification {
  id       String  @id @default(cuid())
  content  String
  type     String?
  client   Client  @relation(fields: [clientId], references: [id])
  clientId String
}

model Reminder {
  id       String   @id @default(cuid())
  message  String
  note     String?
  dueDate  DateTime
  client   Client   @relation(fields: [clientId], references: [id])
  clientId String
}

model Progress {
  id        String   @id @default(cuid())
  goal      String
  status    String?
  notes     String?
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
}
